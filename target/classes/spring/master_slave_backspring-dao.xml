<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!-- 先引入数据库的配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 在dao层主要是跟数据库打交道 ,所以要引入数据库配置，数据源配置，mybatis的配置创建工厂对象 abstract表示的是为也为父类的配置，我们是不能直接使用的 -->
	<bean id="abstractDataSource" abstract="true"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 下面开始配置连接池的私有的属性 -->
		<property name="maxPoolSize" value="30"></property>
		<property name="minPoolSize" value="10"></property>
		<!-- 配置关闭连接后不自动进行提交 -->
		<property name="autoCommitOnClose" value="false"></property>
		<!-- 配置连接超时时间 -->
		<property name="checkoutTimeout" value="10000"></property>
		<!-- 配置当获取失败的重试的次数 -->
		<property name="acquireRetryAttempts" value="2"></property>
	</bean>
	<!-- 下面开始配置我们的主数据库服务器的地址 parent表示的这个bean的父类的id为那个 -->
	<bean id="master" parent="abstractDataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.url}"></property>
	</bean>
	<!-- 下面开始配置我们的从数据库服务器的配置 -->
	<bean id="slave" parent="abstractDataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.slave.url}"></property>
	</bean>
    <!-- 接下来开始配置我们的routing数据源，这个规则是要我们自已定义的 -->
    <bean id="routinDataSource" class="com.hailong.o2o.dao.split.DynamicDataSource">
    	<property name="targetDataSources">
    		<map>
    			<entry key-ref="master" value="master"></entry>
    			<entry key-ref="slave" value="slave"></entry>
    		</map>
    	</property>
    </bean>
    <!-- 接下来配置一个lazy的连接操作 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<ref bean="routinDataSource"/>
		</property>
    </bean>
	<!-- 接下来开始配置我们的mybatis的创建工厂类了 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置我们的数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置我们的mybatis的核心配置文件 -->
		<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
		<!-- 配置我们的mapper的映射文件,这样子就可以把mapper接口和mapper的映射文件分开了 mapperLocations指定的是我们的mapper的映射文件的路径，不配置这个的话，这个文件的路径要和mapper的dao类放在一起 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
		<!-- 进行配置我们的对象的别名,在这样在mapper的映射文件中可以使用别名了 -->
		<property name="typeAliasesPackage" value="com.hailong.o2o.entity"></property>
	</bean>
	<!-- 接下来就可以配置自动扫描我们的mapper的接口对象，并生成相应的mapper接口的实现类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 进行配置具体的package下 -->
		<property name="basePackage" value="com.hailong.o2o.dao"></property>
		<!-- 配置使用的sqlSessionFactory对象 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
</beans>